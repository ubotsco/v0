ARG ELIXIR=<%= versions.elixir %>
ARG ERLANG=<%= versions.erlang %>
ARG ALPINE=<%= versions.alpine %>
ARG NODEJS=<%= versions.nodejs %>

ARG NODEJS_BUILDER="node:${NODEJS}-alpine"
ARG ELIXIR_BUILDER="hexpm/elixir:${ELIXIR}-erlang-${ERLANG}-alpine-${ALPINE}"
ARG RUNTIME="alpine:${ALPINE}"

FROM ${NODEJS_BUILDER} as nodejs_builder

# prepare build dir
WORKDIR /app

# install node dependencies
COPY assets/package.json assets/package-lock.json ./assets/
RUN npm --prefix ./assets install --no-audit

FROM ${ELIXIR_BUILDER} as elixir_builder

# install build dependencies
RUN apk add --no-cache --update bash openssl ca-certificates git alpine-sdk coreutils

# prepare build dir
WORKDIR /app

# install hex + rebar
RUN mix local.hex --force && \
    mix local.rebar --force

# set build ENV
ENV MIX_ENV="prod"

# install mix dependencies
COPY mix.exs mix.lock ./
RUN --mount=type=secret,id=oban_auth_key \
    mix hex.repo add oban https://getoban.pro/repo \
      --fetch-public-key SHA256:4/OSKi0NRF91QVVXlGAhb/BIMLnK8NHcx/EWs+aIWPc \
      --auth-key "$(cat /run/secrets/oban_auth_key)"

RUN mix deps.get --only $MIX_ENV
RUN mkdir config

# copy compile-time config files before we compile dependencies
# to ensure any relevant config change will trigger the dependencies
# to be re-compiled.
COPY config/config.exs config/${MIX_ENV}.exs config/
RUN mix deps.compile

# copy project files
COPY priv priv
COPY lib lib

COPY assets assets
COPY --from=nodejs_builder --chown=nobody:root /app/assets/node_modules /app/assets/node_modules/

# compile assets
RUN mix assets.deploy

# Compile the release
RUN mix compile

# Changes to config/runtime.exs don't require recompiling the code
COPY config/runtime.exs config/

COPY rel rel
RUN mix release

# start a new build stage so that the final image will only contain
# the compiled release and other runtime necessities
FROM ${RUNTIME} as runtime

# Install dependencies
RUN apk add --no-cache --update bash openssl openssh-client ca-certificates libstdc++

WORKDIR "/app"
RUN chown nobody /app

# set runner ENV
ENV MIX_ENV="prod"
ENV ERL_AFLAGS "-proto_dist inet6_tcp"

# Only copy the final release from the build stage
COPY --from=elixir_builder --chown=nobody:root /app/_build/${MIX_ENV}/rel/<%= otp_app %> ./
COPY .iex.exs ./

USER nobody
EXPOSE 4000
CMD ["/app/bin/server"]
