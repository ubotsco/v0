name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

env:
  MIX_ENV: test

permissions:
  contents: read

jobs:
  deps:
    name: "Fetch & Compile dependencies"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/setup-elixir
    - run: |
        export $$(cat .env) && \
          mix hex.repo add oban https://getoban.pro/repo \
            --fetch-public-key SHA256:4/OSKi0NRF91QVVXlGAhb/BIMLnK8NHcx/EWs+aIWPc \
            --auth-key $OBAN_AUTH_KEY

    - name: Install dependencies
      run: mix do deps.get, deps.compile
    - name: Compiles without warnings
      run: mix compile --warnings-as-errors

  test:
    name: "Run tests"
    runs-on: ubuntu-latest
    needs: [deps]
    services:
      db:
        image: postgres:12
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      POSTGRES_PASSWORD: postgres
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/setup-elixir
    - name: Run tests
      run: mix test

  format:
    name: "Check format"
    runs-on: ubuntu-latest
    needs: [deps]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-elixir
      - name: Check code format
        run: mix format --check-formatted

  dialyzer:
    name: "Run dialyzer"
    runs-on: ubuntu-latest
    needs: [deps]
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/setup-elixir
    - name: Restore Dialyzer PLTs
      uses: actions/cache@v3
      with:
        path: |
          _build/**/*.plt
          _build/**/*.plt.hash
        key: plts-cache-${{ env.MIX_LOCK_HASH }}
        restore-keys: plts-cache-
    - name: Check types with Dialyzer
      run: mix dialyzer

  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    needs: [test, format]
    if: github.ref == 'refs/heads/main'
    environment: live
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
